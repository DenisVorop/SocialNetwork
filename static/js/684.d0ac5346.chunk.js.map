{"version":3,"file":"static/js/684.d0ac5346.chunk.js","mappings":"wMACA,GAAgB,QAAU,wBAAwB,MAAQ,sBAAsB,SAAW,0B,4BC+G3F,EAxGkB,SAACA,GACf,IAAMC,EAAkBC,EAAAA,KAAaC,MAAM,CACvCC,MAAOF,EAAAA,KAAaG,UAAU,oBAAoBC,SAAS,qBAC3DC,SAAUL,EAAAA,KAAaG,UAAU,oBAAoBC,SAAS,qBAC9DE,gBAAiBN,EAAAA,KAAaO,MAAM,CAACP,EAAAA,GAAQ,aAAe,sBAAuBI,SAAS,uBAGhG,OACI,SAAC,KAAD,CACII,cAAe,CACXN,MAAO,GACPG,SAAU,GACVC,gBAAiB,GACjBG,QAAS,IAEbC,gBAAgB,EAChBC,kBAAkB,EAClBC,SAAU,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAChCjB,EAAMkB,UAAUH,EAAQE,GACxBD,GAAc,IAElBG,iBAAkBlB,EAbtB,SAeK,gBAAGc,EAAH,EAAGA,OAAQK,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,WAAYC,EAAtD,EAAsDA,QAASC,EAA/D,EAA+DA,aAAcC,EAA7E,EAA6EA,MAAOC,EAApF,EAAoFA,OAApF,OACG,SAAC,KAAD,WACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,iBAAKD,UAAWC,EAAAA,MAAhB,WACI,0BACI,kBAAOC,QAAO,QAAd,oBAAsC,mBACtC,kBACIF,UAAWG,EAAAA,EAAAA,MACXC,KAAK,OACLC,KAAK,QACLC,SAAUZ,EACVa,OAAQZ,EACRa,MAAOrB,EAAOX,WAGrBiB,EAAQjB,OAASgB,EAAOhB,QAAS,cAAGwB,UAAU,QAAb,SAAsBR,EAAOhB,YAEnE,iBAAKwB,UAAWC,EAAAA,SAAhB,WACI,4BACI,0BACI,kBAAOC,QAAO,WAAd,uBAA4C,mBAC5C,kBACIF,UAAWG,EAAAA,EAAAA,MACXC,KAAK,WACLC,KAAK,WACLC,SAAUZ,EACVa,OAAQZ,EACRa,MAAOrB,EAAOR,cAGrBc,EAAQd,UAAYa,EAAOb,WAAY,cAAGqB,UAAU,QAAb,SAAsBR,EAAOb,eAEzE,4BACI,0BACI,kBAAOuB,QAAO,kBAAd,+BAA2D,mBAC3D,kBACIF,UAAWG,EAAAA,EAAAA,MACXC,KAAK,WACLC,KAAK,kBACLC,SAAUZ,EACVa,OAAQZ,EACRa,MAAOrB,EAAOP,qBAGrBa,EAAQb,iBAAmBY,EAAOZ,kBAAmB,cAAGoB,UAAU,QAAb,SAAsBR,EAAOZ,wBAG1FR,EAAMqC,aAAc,gBAAKC,IAAKtC,EAAMqC,WAAWA,WAAYE,IAAI,gBAC/DvC,EAAMqC,aACH,0BACI,kBAAOP,QAAO,UAAd,8BAAkD,mBAClD,kBACIF,UAAWG,EAAAA,EAAAA,MACXC,KAAK,UACLC,KAAK,UACLC,SAAUZ,EACVa,OAAQZ,EACRa,MAAOrB,EAAOJ,cAI1B,gBAAKiB,UAAWG,EAAAA,EAAAA,MAAhB,SACKJ,KAEL,gBAAKC,UAAWC,EAAAA,OAAhB,UACI,mBACID,UAAWG,EAAAA,EAAAA,KACXS,UAAWhB,IAAYE,EACvBe,QAAShB,EACTO,KAAK,SAJT,8BC5D5B,GAAeU,EAAAA,EAAAA,KAPS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,YAAYD,OAC1BP,WAAYM,EAAME,YAAYR,cAKM,CAAEjC,MAAAA,EAAAA,IAA1C,EA3Bc,SAACJ,GAKX,OAAIA,EAAM4C,QACC,SAAC,KAAD,CAAUE,GAAG,cAIpB,gBAAKlB,UAAU,QAAf,UACI,gBAAKA,UAAU,cAAf,UACI,gBAAKA,UAAU,cAAf,UACI,SAAC,EAAD,CAAWV,UAZX,SAACH,EAAQE,GACrBjB,EAAMI,MAAMW,EAAOX,MAAOW,EAAOR,SAAUU,EAAWF,EAAOJ,UAWhB0B,WAAYrC,EAAMqC","sources":["webpack://my-app/./src/scss/formik.module.scss?a49d","components/Body/Login/FormLogin.jsx","components/Body/Login/Login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"formik_wrapper__dCNYc\",\"login\":\"formik_login__iwFB1\",\"password\":\"formik_password__ZSfdV\"};","import { Form, Formik } from 'formik';\nimport ui from '../../../scss/ui.module.scss';\nimport form from '../../../scss/formik.module.scss';\nimport * as yup from 'yup';\nimport React from 'react';\n\n//========================================================================================================================================================\n\nconst FormLogin = (props) => {\n    const validationLogin = yup.object().shape({\n        login: yup.string().typeError('string expected!').required('Obligatory field!'),\n        password: yup.string().typeError('string expected!').required('Obligatory field!'),\n        confirmPassword: yup.string().oneOf([yup.ref('password')], ('Password mismatch!')).required('Obligatory field!')\n    })\n\n    return (\n        <Formik\n            initialValues={{\n                login: '',\n                password: '',\n                confirmPassword: '',\n                captcha: '',\n            }}\n            validateOnBlur={false}\n            validateOnChange={false}\n            onSubmit={(values, { setSubmitting, setStatus }) => {\n                props.getValues(values, setStatus);\n                setSubmitting(false);\n            }}\n            validationSchema={validationLogin}\n        >\n            {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty, status }) => (\n                <Form>\n                    <div className={form.wrapper}>\n                        <div className={form.login}>\n                            <p>\n                                <label htmlFor={`login`}>Login</label><br />\n                                <input\n                                    className={ui.input}\n                                    type=\"text\"\n                                    name='login'\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.login}\n                                />\n                            </p>\n                            {touched.login && errors.login && <p className='error'>{errors.login}</p>}\n                        </div>\n                        <div className={form.password}>\n                            <div>\n                                <p>\n                                    <label htmlFor={`password`}>Password</label><br />\n                                    <input\n                                        className={ui.input}\n                                        type=\"password\"\n                                        name='password'\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.password}\n                                    />\n                                </p>\n                                {touched.password && errors.password && <p className='error'>{errors.password}</p>}\n                            </div>\n                            <div>\n                                <p>\n                                    <label htmlFor={`confirmPassword`}>Confirm password</label><br />\n                                    <input\n                                        className={ui.input}\n                                        type=\"password\"\n                                        name='confirmPassword'\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.confirmPassword}\n                                    />\n                                </p>\n                                {touched.confirmPassword && errors.confirmPassword && <p className='error'>{errors.confirmPassword}</p>}\n                            </div>\n                        </div >\n                        {props.captchaUrl && <img src={props.captchaUrl.captchaUrl} alt='img captcha' />}\n                        {props.captchaUrl &&\n                            <p>\n                                <label htmlFor={`captcha`}>Anti-bot symbol</label><br />\n                                <input\n                                    className={ui.input}\n                                    type=\"captcha\"\n                                    name='captcha'\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.captcha}\n                                />\n                            </p>\n                        }\n                        <div className={ui.error}>\n                            {status}\n                        </div>\n                        <div className={form.button}>\n                            <button\n                                className={ui._btn}\n                                disabled={!isValid && !dirty}\n                                onClick={handleSubmit}\n                                type='submit'\n                            >Login</button>\n                        </div>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\n//========================================================================================================================================================\n\nexport default FormLogin;\n","import { connect } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { login } from '../../../Redux/authReducer.ts';\nimport FormLogin from './FormLogin';\nimport './Login.scss';\nimport React from 'react';\n\n//========================================================================================================================================================\n\nconst Login = (props) => {\n    let getValues = (values, setStatus) => {\n        props.login(values.login, values.password, setStatus, values.captcha);\n    }\n\n    if (props.isAuth) {\n        return <Navigate to='/profile' />\n    }\n\n    return (\n        <div className=\"login\">\n            <div className=\"login__body\">\n                <div className=\"login__form\">\n                    <FormLogin getValues={getValues} captchaUrl={props.captchaUrl} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst MapStateToProps = (state) => ({\n    isAuth: state.authReducer.isAuth,\n    captchaUrl: state.authReducer.captchaUrl,\n})\n\n//========================================================================================================================================================\n\nexport default connect(MapStateToProps, { login })(Login);\n"],"names":["props","validationLogin","yup","shape","login","typeError","required","password","confirmPassword","oneOf","initialValues","captcha","validateOnBlur","validateOnChange","onSubmit","values","setSubmitting","setStatus","getValues","validationSchema","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","status","className","form","htmlFor","ui","type","name","onChange","onBlur","value","captchaUrl","src","alt","disabled","onClick","connect","state","isAuth","authReducer","to"],"sourceRoot":""}