{"version":3,"file":"static/js/545.62a45c9f.chunk.js","mappings":"6GAkCA,IAAe,IAA0B,4D,uHCZzC,EAjBe,SAACA,GACZ,IAAIC,EAAO,aAAeD,EAAME,GAEhC,OACI,gBAAKC,UAAU,sBAAf,UACI,UAAC,KAAD,CAASC,GAAIH,EAAME,UAAU,wBAA7B,WACI,gBAAKA,UAAU,uBAAf,UACI,gBAAKE,IAAKC,MAEbN,EAAMO,WCJvB,EAVgB,SAACP,GACb,OACI,gBAAKG,UAAU,yBAAf,SACKH,EAAMQ,e,2DC0FnB,EA9EiB,SAACR,GAEd,IAAIS,EACAT,EAAMU,kBAAkBC,WACnBC,KAAI,SAACC,GAAD,OACD,SAAC,KAAD,CAAST,GAAG,GAAGD,UAAW,SAAAW,GAAO,OAAIA,EAAQC,SAAWC,EAAAA,EAAAA,cAAmBA,EAAAA,EAAAA,QAA3E,UACI,SAAC,EAAD,CAAQT,KAAMM,EAAON,KAAML,GAAIW,EAAOX,IAASW,EAAOX,SAGlEe,EACAjB,EAAMU,kBAAkBQ,YACnBN,KAAI,SAACO,GAAD,OACD,SAAC,EAAD,CAASX,YAAaW,EAAQA,SAAcA,EAAQjB,OAG1DkB,EAAqBC,EAAAA,KAAaC,MAAM,CAC1CC,eAAgBF,EAAAA,KAAaG,UAAU,oBAAoBC,SAAS,uBAOxE,OACI,gBAAKtB,UAAU,+BAAf,UACI,iBAAKA,UAAU,qBAAf,WACI,gBAAKA,UAAU,yBAAf,SACKM,KAEL,iBAAKN,UAAU,uBAAf,WACI,gBAAKA,UAAU,0BAAf,SACKc,KAEL,2BACI,SAAC,KAAD,CACIS,cAAe,CACXH,eAAgB,IAEpBI,gBAAc,EACdC,SAAU,SAACC,IApBf,SAACA,GACjB7B,EAAM8B,WAAWD,EAAON,gBAmBoBQ,CAAcF,IACtCG,iBAAkBZ,EANtB,SAQK,gBAAGS,EAAH,EAAGA,OAAQI,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,WAAYC,EAAxC,EAAwCA,QAASC,EAAjD,EAAiDA,aAAcC,EAA/D,EAA+DA,aAAcC,EAA7E,EAA6EA,MAA7E,OACG,iBAAKpC,UAAU,sBAAf,WACI,iBAAKA,UAAU,qBAAf,WACI,0BACI,qBAAUqC,YAAY,iCAClBrC,UAAWa,EAAAA,EAAAA,MACXyB,KAAK,OACLlC,KAAK,iBACLmC,SAAUJ,EACVK,OAAQR,EACRS,MAAOf,EAAON,oBAGtB,gBAAKpB,UAAU,wBAAf,UACI,mBACI0C,UAAWT,IAAYG,EACvBO,QAAST,EACTI,KAAK,SAHT,UAKI,gBAAKpC,IAAK0C,EAAAA,EAAOC,IAAI,YAIhCd,EAAQX,gBAAkBU,EAAOV,iBAAkB,cAAGpB,UAAU,QAAb,SAAsB8B,EAAOV,kC,UCzDrH,GAAe0B,E,QAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KAjBkB,SAACC,GACnB,MAAO,CACH1C,kBAAmB0C,EAAM1C,sBAGR,SAAC2C,GACtB,MAAO,CACHvB,WAAY,SAACP,GACT8B,GAASC,EAAAA,EAAAA,GAAwB/B,SAO7C,CAGEgC,I,iJCpBEC,EAA6B,SAACJ,GAC9B,MAAO,CACHK,OAAQL,EAAMM,YAAYD,SAIrBP,EAAmB,SAACS,GAAe,IACtCC,EADqC,0IAEvC,WACI,OAAKC,KAAK7D,MAAMyD,QACT,SAACE,GAAD,UAAeE,KAAK7D,SADI,SAAC,KAAD,CAAUI,GAAG,eAHT,GACX0D,EAAAA,WAOhC,OAAOX,EAAAA,EAAAA,IAAQK,EAARL,CAAoCS,K","sources":["assets/images/arrrow.svg","components/Body/Messages/Dialog/Dialog.jsx","components/Body/Messages/Message/Message.jsx","components/Body/Messages/Messages.jsx","components/Body/Messages/MessagesContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgArrrow(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.36841 7C0.816123 7 0.368408 7.44772 0.368408 8C0.368408 8.55228 0.816123 9 1.36841 9V7ZM15.3591 8.70711C15.7496 8.31658 15.7496 7.68342 15.3591 7.29289L8.99516 0.928932C8.60464 0.538408 7.97147 0.538408 7.58095 0.928932C7.19042 1.31946 7.19042 1.95262 7.58095 2.34315L13.2378 8L7.58095 13.6569C7.19042 14.0474 7.19042 14.6805 7.58095 15.0711C7.97147 15.4616 8.60464 15.4616 8.99516 15.0711L15.3591 8.70711ZM1.36841 9H14.652V7H1.36841V9Z\",\n    fill: \"black\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrrow);\nexport default __webpack_public_path__ + \"static/media/arrrow.ceb7a8aba934b6b115350c17c345ff36.svg\";\nexport { ForwardRef as ReactComponent };","import { NavLink } from 'react-router-dom';\nimport hedgehog from '../../../../assets/images/hedgehog.png';\n\n//========================================================================================================================================================\n\nconst Dialog = (props) => {\n    let path = '/messages/' + props.id;\n\n    return (\n        <div className='messages-body__user'>\n            <NavLink to={path} className=\"messages-body__dialog\">\n                <div className=\"messages-body__image\">\n                    <img src={hedgehog} />\n                </div>\n                {props.name}\n            </NavLink>\n        </div>\n    );\n}\n\n//========================================================================================================================================================\n\nexport default Dialog;\n","const Message = (props) => {\n    return (\n        <div className=\"messages-body__message\">\n            {props.textMessage}\n        </div>\n    );\n}\n\n//========================================================================================================================================================\n\nexport default Message;\n","import Dialog from './Dialog/Dialog'\nimport Message from './Message/Message'\nimport './Messages.scss'\nimport '../Profile/Profile.scss'\nimport ui from '../../../scss/ui.module.scss';\nimport React from 'react';\n\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { NavLink } from 'react-router-dom';\n\nimport arrow from '../../../assets/images/arrrow.svg'\n\n//========================================================================================================================================================\n\nconst Messages = (props) => {\n\n    let dialogsElements =\n        props.stateMessagesPage.dialogData\n            .map((dialog) =>\n                <NavLink to='' className={diaData => diaData.isActive ? ui.dialog_active : ui.dialog}>\n                    <Dialog name={dialog.name} id={dialog.id} key={dialog.id} />\n                </NavLink>)\n\n    let messagesElements =\n        props.stateMessagesPage.messageData\n            .map((message) =>\n                <Message textMessage={message.message} key={message.id} />\n            )\n\n    const validationMessages = yup.object().shape({\n        newMessageText: yup.string().typeError('string expected!').required('Obligatory field!'),\n    })\n\n    let addNewMessage = (values) => {\n        props.addMessage(values.newMessageText)\n    }\n\n    return (\n        <div className=\"body__messages messages-body\">\n            <div className='messages-body__row'>\n                <div className=\"messages-body__dialogs\">\n                    {dialogsElements}\n                </div>\n                <div className='messages-body__right'>\n                    <div className=\"messages-body__messages\">\n                        {messagesElements}\n                    </div>\n                    <form>\n                        <Formik\n                            initialValues={{\n                                newMessageText: '',\n                            }}\n                            validateOnBlur\n                            onSubmit={(values) => { addNewMessage(values) }}\n                            validationSchema={validationMessages}\n                        >\n                            {({ values, errors, touched, handleBlur, isValid, handleSubmit, handleChange, dirty }) => (\n                                <div className=\"messages-body__form\">\n                                    <div className=\"profile-body__form\">\n                                        <div>\n                                            <textarea placeholder='Write smth here and tap to btn'\n                                                className={ui._area}\n                                                type=\"text\"\n                                                name='newMessageText'\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.newMessageText}\n                                            />\n                                        </div>\n                                        <div className=\"profile-body__addpost\">\n                                            <button\n                                                disabled={!isValid && !dirty}\n                                                onClick={handleSubmit}\n                                                type='submit'\n                                            >\n                                                <img src={arrow} alt=\"\" />\n                                            </button>\n                                        </div>\n                                    </div>\n                                    {touched.newMessageText && errors.newMessageText && <p className='error'>{errors.newMessageText}</p>}\n                                </div>\n                            )}\n                        </Formik>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n//========================================================================================================================================================\n\nexport default Messages;\n","import { connect } from 'react-redux';\nimport { addMessageActionCreator } from '../../../Redux/messagesReducer.ts';\nimport Messages from './Messages';\nimport { withAuthRedirect } from '../../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\n//========================================================================================================================================================\n\nlet mapStateToProps = (state) => {\n    return {\n        stateMessagesPage: state.stateMessagesPage,\n    }\n}\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addMessage: (newMessageText) => {\n            dispatch(addMessageActionCreator(newMessageText));\n        },\n    }\n}\n\n//========================================================================================================================================================\n\nexport default compose(\n    withAuthRedirect,\n    connect(mapStateToProps, mapDispatchToProps),\n)(Messages);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\n//========================================================================================================================================================\n\nlet mapStateToPropsForRedirect = (state) => {\n    return {\n        isAuth: state.authReducer.isAuth,\n    }\n}\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Navigate to='/login' />;\n            return <Component {...this.props}/>\n        }\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\n}\n"],"names":["props","path","id","className","to","src","hedgehog","name","textMessage","dialogsElements","stateMessagesPage","dialogData","map","dialog","diaData","isActive","ui","messagesElements","messageData","message","validationMessages","yup","shape","newMessageText","typeError","required","initialValues","validateOnBlur","onSubmit","values","addMessage","addNewMessage","validationSchema","errors","touched","handleBlur","isValid","handleSubmit","handleChange","dirty","placeholder","type","onChange","onBlur","value","disabled","onClick","arrow","alt","compose","withAuthRedirect","connect","state","dispatch","addMessageActionCreator","Messages","mapStateToPropsForRedirect","isAuth","authReducer","Component","RedirectComponent","this","React"],"sourceRoot":""}