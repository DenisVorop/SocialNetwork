{"version":3,"file":"static/js/545.e8203719.chunk.js","mappings":"6LAqBA,EAjBe,SAACA,GACZ,IAAIC,EAAO,aAAeD,EAAME,GAEhC,OACI,gBAAKC,UAAU,sBAAf,UACI,UAAC,KAAD,CAASC,GAAIH,EAAME,UAAU,wBAA7B,WACI,gBAAKA,UAAU,uBAAf,UACI,gBAAKE,IAAI,uKAEZL,EAAMM,WCHvB,EAVgB,SAACN,GACb,OACI,gBAAKG,UAAU,yBAAf,SACKH,EAAMO,e,uCC6EnB,EApEiB,SAACP,GAEd,IAAIQ,EACAR,EAAMS,kBAAkBC,WAAWC,KAAI,SAAAC,GAAM,OAAI,SAAC,KAAD,CAASR,GAAG,GAAGD,UAAW,SAAAU,GAAO,OAAIA,EAAQC,SAAWC,EAAAA,EAAAA,cAAmBA,EAAAA,EAAAA,QAA3E,UAAsF,SAAC,EAAD,CAAQT,KAAMM,EAAON,KAAMJ,GAAIU,EAAOV,IAASU,EAAOV,SAE7Lc,EACAhB,EAAMS,kBAAkBQ,YAAYN,KAAI,SAAAO,GAAO,OAAI,SAAC,EAAD,CAASX,YAAaW,EAAQA,SAAcA,EAAQhB,OAErGiB,EAAqBC,EAAAA,KAAaC,MAAM,CAC1CC,eAAgBF,EAAAA,KAAaG,UAAU,oBAAoBC,SAAS,uBAOxE,OACI,gBAAKrB,UAAU,+BAAf,UACI,iBAAKA,UAAU,qBAAf,WACI,gBAAKA,UAAU,yBAAf,SACKK,KAEL,iBAAKL,UAAU,uBAAf,WACI,gBAAKA,UAAU,0BAAf,SACKa,KAEL,2BACI,SAAC,KAAD,CACIS,cAAe,CACXH,eAAgB,IAEpBI,gBAAc,EACdC,SAAU,SAACC,IApBf,SAACA,GACjB5B,EAAM6B,WAAWD,EAAON,gBAmBoBQ,CAAcF,IACtCG,iBAAkBZ,EANtB,SAQK,gBAAGS,EAAH,EAAGA,OAAQI,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,WAAYC,EAAxC,EAAwCA,QAASC,EAAjD,EAAiDA,aAAcC,EAA/D,EAA+DA,aAAcC,EAA7E,EAA6EA,MAA7E,OACG,iBAAKnC,UAAU,sBAAf,WACI,0BACI,qBAAUoC,YAAY,iCAClBpC,UAAWY,EAAAA,EAAAA,MACXyB,KAAK,OACLlC,KAAK,iBACLmC,SAAUJ,EACVK,OAAQR,EACRS,MAAOf,EAAON,mBAGrBW,EAAQX,gBAAkBU,EAAOV,iBAAkB,cAAGnB,UAAU,QAAb,SAAsB6B,EAAOV,kBACjF,0BACI,mBACInB,UAAWY,EAAAA,EAAAA,KACX6B,UAAWT,IAAYG,EACvBO,QAAST,EACTI,KAAK,SAJT,4C,UCtCxC,GAAeM,E,QAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KAjBkB,SAACC,GACnB,MAAO,CACHxC,kBAAmBwC,EAAMxC,sBAGR,SAACyC,GACtB,MAAO,CACHrB,WAAY,SAACP,GACT4B,GAASC,EAAAA,EAAAA,GAAwB7B,SAO7C,CAGE8B,I,iJCpBEC,EAA6B,SAACJ,GAC9B,MAAO,CACHK,OAAQL,EAAMM,YAAYD,SAIrBP,EAAmB,SAACS,GAAe,IACtCC,EADqC,0IAEvC,WACI,OAAKC,KAAK1D,MAAMsD,QACT,SAACE,GAAD,UAAeE,KAAK1D,SADI,SAAC,KAAD,CAAUI,GAAG,eAHT,GACXuD,EAAAA,WAOhC,OAAOX,EAAAA,EAAAA,IAAQK,EAARL,CAAoCS","sources":["components/Body/Messages/Dialog/Dialog.jsx","components/Body/Messages/Message/Message.jsx","components/Body/Messages/Messages.jsx","components/Body/Messages/MessagesContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\n\n//========================================================================================================================================================\n\nconst Dialog = (props) => {\n    let path = '/messages/' + props.id;\n\n    return (\n        <div className='messages-body__user'>\n            <NavLink to={path} className=\"messages-body__dialog\">\n                <div className=\"messages-body__image\">\n                    <img src='https://sun9-25.userapi.com/impg/8Hxs-5Fi7nYEnaxzvAf5uGgdZ-AEM3ig2Fivkw/_51hBNfr4sA.jpg?size=828x828&quality=96&sign=c92f719a55e5af4ba9d22d59ed55c052&type=album' />\n                </div>\n                {props.name}\n            </NavLink>\n        </div>\n    );\n}\n\n//========================================================================================================================================================\n\nexport default Dialog;\n","const Message = (props) => {\n    return (\n        <div className=\"messages-body__message\">\n            {props.textMessage}\n        </div>\n    );\n}\n\n//========================================================================================================================================================\n\nexport default Message;\n","import Dialog from './Dialog/Dialog'\nimport Message from './Message/Message'\nimport './Messages.scss'\nimport ui from '../../../scss/ui.module.scss';\nimport React from 'react';\n\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { NavLink } from 'react-router-dom';\n\n//========================================================================================================================================================\n\nconst Messages = (props) => {\n    // { diaData => diaData.isActive ? ui.dialog_active : ui.dialog }\n    let dialogsElements =\n        props.stateMessagesPage.dialogData.map(dialog => <NavLink to='' className={diaData => diaData.isActive ? ui.dialog_active : ui.dialog}><Dialog name={dialog.name} id={dialog.id} key={dialog.id} /></NavLink>)\n\n    let messagesElements =\n        props.stateMessagesPage.messageData.map(message => <Message textMessage={message.message} key={message.id} />)\n\n    const validationMessages = yup.object().shape({\n        newMessageText: yup.string().typeError('string expected!').required('Obligatory field!'),\n    })\n\n    let addNewMessage = (values) => {\n        props.addMessage(values.newMessageText)\n    }\n\n    return (\n        <div className=\"body__messages messages-body\">\n            <div className='messages-body__row'>\n                <div className=\"messages-body__dialogs\">\n                    {dialogsElements}\n                </div>\n                <div className='messages-body__right'>\n                    <div className=\"messages-body__messages\">\n                        {messagesElements}\n                    </div>\n                    <form>\n                        <Formik\n                            initialValues={{\n                                newMessageText: '',\n                            }}\n                            validateOnBlur\n                            onSubmit={(values) => { addNewMessage(values) }}\n                            validationSchema={validationMessages}\n                        >\n                            {({ values, errors, touched, handleBlur, isValid, handleSubmit, handleChange, dirty }) => (\n                                <div className=\"messages-body__form\">\n                                    <div>\n                                        <textarea placeholder='Write smth here and tap to btn'\n                                            className={ui._area}\n                                            type=\"text\"\n                                            name='newMessageText'\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.newMessageText}\n                                        />\n                                    </div>\n                                    {touched.newMessageText && errors.newMessageText && <p className='error'>{errors.newMessageText}</p>}\n                                    <div>\n                                        <button\n                                            className={ui._btn}\n                                            disabled={!isValid && !dirty}\n                                            onClick={handleSubmit}\n                                            type='submit'\n                                        >add message</button>\n                                    </div>\n                                </div>\n                            )}\n                        </Formik>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n//========================================================================================================================================================\n\nexport default Messages;\n","import { connect } from 'react-redux';\nimport { addMessageActionCreator } from '../../../Redux/messagesReducer';\nimport Messages from './Messages';\nimport { withAuthRedirect } from '../../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\n//========================================================================================================================================================\n\nlet mapStateToProps = (state) => {\n    return {\n        stateMessagesPage: state.stateMessagesPage,\n    }\n}\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addMessage: (newMessageText) => {\n            dispatch(addMessageActionCreator(newMessageText));\n        },\n    }\n}\n\n//========================================================================================================================================================\n\nexport default compose(\n    withAuthRedirect,\n    connect(mapStateToProps, mapDispatchToProps),\n)(Messages);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\n//========================================================================================================================================================\n\nlet mapStateToPropsForRedirect = (state) => {\n    return {\n        isAuth: state.authReducer.isAuth,\n    }\n}\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Navigate to='/login' />;\n            return <Component {...this.props}/>\n        }\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\n}\n"],"names":["props","path","id","className","to","src","name","textMessage","dialogsElements","stateMessagesPage","dialogData","map","dialog","diaData","isActive","ui","messagesElements","messageData","message","validationMessages","yup","shape","newMessageText","typeError","required","initialValues","validateOnBlur","onSubmit","values","addMessage","addNewMessage","validationSchema","errors","touched","handleBlur","isValid","handleSubmit","handleChange","dirty","placeholder","type","onChange","onBlur","value","disabled","onClick","compose","withAuthRedirect","connect","state","dispatch","addMessageActionCreator","Messages","mapStateToPropsForRedirect","isAuth","authReducer","Component","RedirectComponent","this","React"],"sourceRoot":""}